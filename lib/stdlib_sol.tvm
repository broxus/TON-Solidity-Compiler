.internal-alias :general_purpose,    1

.selector
; s0 - selector (0 (internal message), -1 (external message), -2 (tick tock) or 1 (function call by contract))
; [s1] - function id if s0==1
; [s2] - message id (int, ext) if s0==1
SETCP 0          ; -2
DICTPUSHCONST 32 ; -2 dict 32
PUSH S2          ; -2 dict 32 -2
EQINT 1          ; -2 dict 32 -2==1
PUSHCONT {
	; -2 dict 32
	DICTIGETJMP ; nothing
}
IFNOTJMP
PUSHREFCONT   ; funId 1 dict 32 cont
POPCTR c3     ; funId 1 dict 32
BLKDROP2 1, 2 ; funId dict 32
DICTUGETJMP



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; THE CODE BELOW IS GENERATED. DO NOT CHANGE IT!

.macro insert_pubkey_macro
;; param: my_contract
;; param: pubkey
; function insert_pubkey_macro
;; push identifier my_contract
PUSH S1
CTOS
;; decl: slice
NEWC
;; decl: builder
;; if
;; push identifier slice
PUSH S1
LDU 1
POP S3
ISZERO
PUSHCONT {
	PUSHINT 1
	STZEROES
}
PUSHCONT {
	PUSHINT 1
	STONES
	;; push identifier slice
	PUSH S1
	LDU 32
	POP S3
	STUR 32
}
IFELSE
;; end if
;; if
;; push identifier slice
PUSH S1
LDU 1
POP S3
ISZERO
PUSHCONT {
	PUSHINT 1
	STZEROES
}
PUSHCONT {
	PUSHINT 1
	STONES
	;; push identifier slice
	PUSH S1
	LDU 2
	POP S3
	STUR 2
}
IFELSE
;; end if
;; if
;; push identifier slice
PUSH S1
LDU 1
POP S3
ISZERO
PUSHCONT {
	PUSHINT 1
	STZEROES
}
PUSHCONT {
	PUSHINT 1
	STONES
	;; push identifier slice
	PUSH S1
	LDREF
	POP S3
	STREFR
}
IFELSE
;; end if
;; if
;; push identifier slice
PUSH S1
LDU 1
POP S3
NEQINT 1
THROWIF 55
;; end if
PUSHINT 1
STONES
NEWC
;; decl: key_builder
;; push identifier pubkey
PUSH S3
STUR 256
;; push identifier slice
PUSH S2
LDREF
POP S4
CTOS
;; decl: data
LDDICT
SWAP
;; decl: dict
;; push identifier key_builder
PUSH S2
PUSHINT 0
;; push identifier dict
PUSH S2
PUSHINT 64
DICTUSETB
NIP
;; decl: dict_builder
;; push identifier dict
DUP
NEWC
STDICT
;; push identifier dict_builder
DUP
ENDC
;; push identifier builder
PUSH S5
STREF
POP S5
;; if
;; push identifier slice
PUSH S5
LDU 1
POP S7
ISZERO
PUSHCONT {
	;; push identifier builder
	PUSH S4
	PUSHINT 1
	STZEROES
	POP S5
}
PUSHCONT {
	;; push identifier builder
	PUSH S4
	PUSHINT 1
	STONES
	POP S5
	;; push identifier slice
	PUSH S5
	LDREF
	POP S7
	;; push identifier builder
	PUSH S5
	STREF
	POP S5
}
IFELSE
;; end if
;; return
;; push identifier builder
PUSH S4
ENDC
XCHG s8
BLKDROP 8
; end function insert_pubkey_macro

.macro unpack_address_macro
;; param: slice
; function unpack_address_macro
;; push identifier slice
DUP
PARSEMSGADDR
;; decl: tuple
;; if
;; push identifier tuple
DUP
FIRST
NEQINT 2
THROWIF 53
;; end if
;; return
;; push identifier tuple
DUP
THIRD
;; push identifier tuple
PUSH S1
INDEX 3
PLDU 256
BLKDROP2 2, 2
; end function unpack_address_macro

.macro replay_protection_macro
;; param: msg_timestamp
; function replay_protection_macro
PUSHCONT {
	;; if
	GETGLOB 3
	;; <
	;; push identifier msg_timestamp
	PUSH S1
	LESS
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier msg_timestamp
		DUP
		;; <
		NOW
		;; *
		PUSHINT 1000
		MUL
		;; +
		PUSHINT 1800000
		ADD
		LESS
	}
	IF
	PUSHCONT {
		;; push identifier msg_timestamp
		;; return
		SETGLOB 3
	}
	IFJMP
	;; end if
	DROP
	THROW 52
}
CALLX
; end function replay_protection_macro

.macro message_balance_macro
; function message_balance_macro
;; ret param: balance
PUSHINT 0
;; if
DEPTH
ADDCONST -5
PICK
PUSHCONT {
	DEPTH
	ADDCONST -2
	PICK
	; expValue
	; end expValue
	; colValue
	NIP
	; end colValue
}
IFNOT
;; end if
;; returning named params
; end function message_balance_macro

.macro __tonToGas_macro
;; param: _ton
;; param: wid
; function __tonToGas_macro
;; return
;; push identifier _ton
PUSH S1
PUSHINT 65536
;; push identifier wid
PUSH S2
;; param: wid
; function __gasGasPrice
;; ret param: gasPrice
PUSHINT 0
;; push identifier wid
PUSH S1
EQINT 0
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	;; push identifier wid
	PUSH S1
	EQINT -1
}
IFNOT
THROWIFNOT 67
;; push identifier wid
PUSH S1
EQINT 0
PUSHCONT {
	PUSHINT 21
}
PUSHCONT {
	PUSHINT 20
}
IFELSE
CONFIGPARAM
NULLSWAPIFNOT
;; decl: cell
;; decl: status
;; push identifier status
DUP
THROWIFNOT 68
;; push identifier cell
PUSH S1
CTOS
;; decl: s
; expValue
DUP
; end expValue
LDU 8
LDU 64
LDU 64
LDU 8
LDU 64
; colValue
POP S6
; end colValue
REVERSE 5, 0
BLKDROP 4
; expValue
; end expValue
; colValue
POP S4
; end colValue
;; returning named params
BLKSWAP 1, 4
BLKDROP 4
; end function __gasGasPrice
MULDIV
NIP
NIP
; end function __tonToGas_macro

.macro __gasToTon_macro
;; param: gas
;; param: wid
; function __gasToTon_macro
;; return
;; push identifier gas
;; push identifier wid
DUP2
;; param: wid
; function __gasGasPrice
;; ret param: gasPrice
PUSHINT 0
;; push identifier wid
PUSH S1
EQINT 0
;; short-circuiting ||
DUP
PUSHCONT {
	DROP
	;; push identifier wid
	PUSH S1
	EQINT -1
}
IFNOT
THROWIFNOT 67
;; push identifier wid
PUSH S1
EQINT 0
PUSHCONT {
	PUSHINT 21
}
PUSHCONT {
	PUSHINT 20
}
IFELSE
CONFIGPARAM
NULLSWAPIFNOT
;; decl: cell
;; decl: status
;; push identifier status
DUP
THROWIFNOT 68
;; push identifier cell
PUSH S1
CTOS
;; decl: s
; expValue
DUP
; end expValue
LDU 8
LDU 64
LDU 64
LDU 8
LDU 64
; colValue
POP S6
; end colValue
REVERSE 5, 0
BLKDROP 4
; expValue
; end expValue
; colValue
POP S4
; end colValue
;; returning named params
BLKSWAP 1, 4
BLKDROP 4
; end function __gasGasPrice
PUSHINT 65536
MULDIVC
NIP
NIP
; end function __gasToTon_macro

.macro __exp_macro
;; param: a
;; param: n
; function __exp_macro
PUSHINT 1
;; decl: res
; while
PUSHCONT {
	;; push identifier n
	PUSH S1
	NEQINT 0
}
PUSHCONT {
	;; if
	;; push identifier n
	PUSH S1
	;; %
	MODPOW2 1
	NEQINT 0
	PUSHCONT {
		;; push identifier a
		; expValue
		; end expValue
		; colValue
		PUSH S2
		MUL
		; end colValue
		;; --
		; expValue
		PUSH S1
		; end expValue
		DEC
		; colValue
		POP S2
		; end colValue
	}
	PUSHCONT {
		;; push identifier a
		; expValue
		; end expValue
		PUSH2 S2, S2
		MUL
		; colValue
		POP S3
		; end colValue
		; expValue
		; end expValue
		PUSH S1
		RSHIFT 1
		; colValue
		POP S2
		; end colValue
	}
	IFELSE
	;; end if
}
WHILE
; end while
;; return
NIP
NIP
; end function __exp_macro

.globl	convertIntToDecStr_short
.type	convertIntToDecStr_short, @function
;; param: builder
;; param: integer
; function convertIntToDecStr_short
;; return
;; push identifier builder
;; push identifier integer
DUP2
ABS
;; uint256
UFITS 256
PUSHINT 0
FALSE
;; push identifier integer
PUSH S4
LESSINT 0
CALLREF {
	CALL $convertIntToDecStr_macro$
}
BLKDROP2 2, 3
; end function convertIntToDecStr_short

.macro convertIntToDecStr_macro
;; param: builder
;; param: integer
;; param: width
;; param: leadingZeros
;; param: addMinus
; function convertIntToDecStr_macro
;; push identifier builder
PUSH S4
BREMBITS
;; /
RSHIFT 3
;; decl: remBytes
NEWC
;; decl: oldBuilder
NEWC
;; decl: newBuilder
FALSE
;; decl: addedNewBuilder
;; if
;; push identifier remBytes
PUSH S3
PUSHCONT {
	; expValue
	; end expValue
	; colValue
	DROP
	TRUE
	; end colValue
	; expValue
	; end expValue
	;; push identifier builder
	PUSH S8
	; colValue
	POP S3
	; end colValue
	; expValue
	; end expValue
	;; push identifier newBuilder
	PUSH S1
	; colValue
	POP S9
	; end colValue
	; expValue
	; end expValue
	PUSHINT 127
	; colValue
	POP S4
	; end colValue
}
IFNOT
;; end if
;; push identifier leadingZeros
PUSH S5
PUSHCONT {
	PUSHINT 48
}
PUSHCONT {
	PUSHINT 32
}
IFELSE
;; decl: fill
;; if
;; push identifier addMinus
PUSH S5
PUSHCONT {
	; expValue
	PUSH S9
	; end expValue
	PUSHINT 45
	STUR 8
	; colValue
	POP S10
	; end colValue
}
IF
;; end if
;; --
; expValue
PUSH S4
; end expValue
DEC
; colValue
POP S5
; end colValue
;; if
;; push identifier remBytes
PUSH S4
PUSHCONT {
	; expValue
	; end expValue
	TRUE
	; colValue
	POP S2
	; end colValue
	; expValue
	; end expValue
	;; push identifier builder
	PUSH S9
	; colValue
	POP S4
	; end colValue
	; expValue
	; end expValue
	;; push identifier newBuilder
	PUSH S2
	; colValue
	POP S10
	; end colValue
	; expValue
	; end expValue
	PUSHINT 127
	; colValue
	POP S5
	; end colValue
}
IFNOT
;; end if
;; push identifier integer
PUSH S8
PUSHINT 10
;; param: integer
;; param: modulo
; function parseInteger
;; ret param: length
PUSHINT 0
;; ret param: digits
PUSHINT 0
NULL
TUPLE 2
PUSHCONT {
	; expValue
	; end expValue
	;; push identifier digits
	; colValue
	DUP
	SETINDEX 1
	; end colValue
	;; if
	;; push identifier integer
	PUSH S3
	PUSHCONT {
		PUSHINT 0
		NULL
		TUPLE 2
		;; decl: digit
		; expValue
		; end expValue
		; colValue
		PUSHINT 0
		SETINDEX 0
		; end colValue
		; expValue
		; end expValue
		;; push identifier digits
		; colValue
		PUSH S1
		SETINDEX 1
		; end colValue
		; expValue
		; end expValue
		;; push identifier digit
		DUP
		; colValue
		POP S2
		; end colValue
		;; return
		PUSHINT 1
		;; push identifier digits
		PUSH S2
		BLKDROP2 5, 2
	}
	IFNOTJMP
	;; end if
	; while
	PUSHCONT {
		;; push identifier integer
		PUSH S3
		NEQINT 0
	}
	PUSHCONT {
		;; ++
		; expValue
		PUSH S1
		; end expValue
		INC
		; colValue
		POP S2
		; end colValue
		PUSHINT 0
		NULL
		TUPLE 2
		;; decl: digit
		;; push identifier integer
		;; push identifier modulo
		BLKPUSH 2, 4
		DIVMOD
		SWAP
		; expValue
		; end expValue
		; colValue
		POP S6
		; end colValue
		; expValue
		PUSH S2
		; end expValue
		SWAP
		; colValue
		SETINDEX 0
		POP S2
		; end colValue
		; expValue
		; end expValue
		;; push identifier digits
		; colValue
		; end colValue
		; expValue
		; end expValue
		;; push identifier digit
		; colValue
		; end colValue
		SWAP
		SETINDEX 1
	}
	WHILE
	; end while
	;; get member tail
	;; push identifier digits
	DUP
	INDEX 1
	DUP
	ISNULL
	THROWIF 63
	; expValue
	; end expValue
	; colValue
	NIP
	; end colValue
	;; returning named params
	SWAP2
	DROP2
}
CALLX
; end function parseInteger
;; decl: length
;; decl: digits
;; if
;; push identifier width
PUSH S9
PUSHCONT {
	;; if
	;; push identifier width
	;; <
	;; push identifier length
	PUSH2 S9, S1
	LESS
	;; short-circuiting ||
	DUP
	PUSHCONT {
		DROP
		;; push identifier width
		PUSH S9
		GTINT 127
	}
	IFNOT
	THROWIF 66
	;; end if
	;; push identifier width
	;; -
	;; push identifier length
	PUSH2 S9, S1
	SUB
	;; decl: zeroes
	;; if
	;; push identifier zeroes
	;; <=
	;; push identifier remBytes
	PUSH2 S0, S7
	LEQ
	PUSHCONT {
		; while
		;; push identifier zeroes
		DUP
		PUSHCONT {
			; expValue
			; end expValue
			;; push identifier fill
			PUSH2 S12, S3
			STUR 8
			; colValue
			POP S13
			; end colValue
		}
		REPEAT
		; end while
		;; push identifier zeroes
		; expValue
		; end expValue
		PUSH2 S7, S0
		SUB
		; colValue
		POP S8
		; end colValue
		;; if
		;; push identifier remBytes
		PUSH S7
		PUSHCONT {
			; expValue
			; end expValue
			TRUE
			; colValue
			POP S5
			; end colValue
			; expValue
			; end expValue
			;; push identifier builder
			PUSH S12
			; colValue
			POP S7
			; end colValue
			; expValue
			; end expValue
			;; push identifier newBuilder
			PUSH S5
			; colValue
			POP S13
			; end colValue
			; expValue
			; end expValue
			PUSHINT 127
			; colValue
			POP S8
			; end colValue
		}
		IFNOT
		;; end if
	}
	PUSHCONT {
		; while
		;; push identifier remBytes
		PUSH S7
		PUSHCONT {
			; expValue
			; end expValue
			;; push identifier fill
			PUSH2 S12, S3
			STUR 8
			; colValue
			POP S13
			; end colValue
		}
		REPEAT
		; end while
		; expValue
		; end expValue
		TRUE
		; colValue
		POP S5
		; end colValue
		; expValue
		; end expValue
		;; push identifier builder
		PUSH S12
		; colValue
		POP S7
		; end colValue
		; expValue
		; end expValue
		;; push identifier newBuilder
		PUSH S5
		; colValue
		POP S13
		; end colValue
		; while
		;; push identifier zeroes
		;; -
		;; push identifier remBytes
		PUSH2 S0, S7
		SUB
		PUSHCONT {
			; expValue
			; end expValue
			;; push identifier fill
			PUSH2 S12, S3
			STUR 8
			; colValue
			POP S13
			; end colValue
		}
		REPEAT
		; end while
		; expValue
		; end expValue
		PUSHINT 127
		;; -
		;; push identifier zeroes
		PUSH S1
		SUB
		;; +
		;; push identifier remBytes
		PUSH S8
		ADD
		; colValue
		POP S8
		; end colValue
	}
	IFELSE
	;; end if
	DROP
}
IF
;; end if
;; if
;; push identifier length
;; <=
;; push identifier remBytes
PUSH2 S1, S6
LEQ
PUSHCONT {
	; while
	;; push identifier length
	PUSH S1
	PUSHCONT {
		; expValue
		PUSH S11
		; end expValue
		PUSHINT 48
		;; +
		;; get member num
		;; push identifier digits
		PUSH S2
		INDEX 0
		ADD
		STUR 8
		; colValue
		POP S12
		; end colValue
		;; get member tail
		;; push identifier digits
		DUP
		INDEX 1
		DUP
		ISNULL
		THROWIF 63
		; expValue
		; end expValue
		; colValue
		NIP
		; end colValue
	}
	REPEAT
	; end while
}
PUSHCONT {
	; while
	;; push identifier remBytes
	PUSH S6
	PUSHCONT {
		; expValue
		PUSH S11
		; end expValue
		PUSHINT 48
		;; +
		;; get member num
		;; push identifier digits
		PUSH S2
		INDEX 0
		ADD
		STUR 8
		; colValue
		POP S12
		; end colValue
		;; get member tail
		;; push identifier digits
		DUP
		INDEX 1
		DUP
		ISNULL
		THROWIF 63
		; expValue
		; end expValue
		; colValue
		NIP
		; end colValue
	}
	REPEAT
	; end while
	; expValue
	; end expValue
	TRUE
	; colValue
	POP S4
	; end colValue
	; expValue
	; end expValue
	;; push identifier builder
	PUSH S11
	; colValue
	POP S6
	; end colValue
	; expValue
	; end expValue
	;; push identifier newBuilder
	PUSH S4
	; colValue
	POP S12
	; end colValue
	; while
	;; push identifier length
	;; -
	;; push identifier remBytes
	PUSH2 S1, S6
	SUB
	PUSHCONT {
		; expValue
		PUSH S11
		; end expValue
		PUSHINT 48
		;; +
		;; get member num
		;; push identifier digits
		PUSH S2
		INDEX 0
		ADD
		STUR 8
		; colValue
		POP S12
		; end colValue
		;; get member tail
		;; push identifier digits
		DUP
		INDEX 1
		DUP
		ISNULL
		THROWIF 63
		; expValue
		; end expValue
		; colValue
		NIP
		; end colValue
	}
	REPEAT
	; end while
}
IFELSE
;; end if
;; if
;; !
;; push identifier addedNewBuilder
PUSH S3
NOT
PUSHCONT {
	; expValue
	; end expValue
	;; push identifier builder
	PUSH S11
	; colValue
	POP S6
	; end colValue
}
PUSHCONT {
	; expValue
	; end expValue
	;; push identifier builder
	PUSH S11
	; colValue
	POP S5
	; end colValue
}
IFELSE
;; end if
;; return
;; push identifier oldBuilder
;; push identifier newBuilder
;; push identifier addedNewBuilder
BLKPUSH 3, 5
BLKDROP2 12, 3
; end function convertIntToDecStr_macro

.macro convertAddressToHexString_macro
;; param: list
;; param: builder
;; param: addr
; function convertAddressToHexString_macro
;; address.unpack()
;; push identifier addr
DUP
CALLREF {
	CALL $unpack_address_macro$
}
;; decl: wid
;; decl: value
NEWC
;; decl: first
NEWC
;; decl: second
PUSHINT 0
;; decl: flag
;; push identifier builder
;; push identifier wid
PUSH2 S6, S4
CALL $convertIntToHexStr_short$
XCHG s2
; expValue
; end expValue
; colValue
POP S5
; end colValue
; expValue
; end expValue
; colValue
POP S3
; end colValue
; expValue
; end expValue
; colValue
NIP
; end colValue
;; push identifier list
PUSH S7
;; push identifier first
;; push identifier second
;; push identifier flag
BLKPUSH 3, 3
CALLREF {
	CALL $appendToList_macro$
}
SWAP
; expValue
; end expValue
; colValue
POP S9
; end colValue
; expValue
; end expValue
; colValue
POP S7
; end colValue
;; push identifier builder
PUSH S6
BREMBITS
;; decl: remBits
;; if
;; push identifier remBits
DUP
GTINT 8
PUSHCONT {
	; expValue
	PUSH S7
	; end expValue
	PUSHINT 58
	STUR 8
	; colValue
	POP S8
	; end colValue
}
PUSHCONT {
	NEWC
	;; decl: nBuilder
	; expValue
	DUP
	; end expValue
	PUSHINT 58
	STUR 8
	; colValue
	NIP
	; end colValue
	;; push identifier list
	;; push identifier builder
	BLKPUSH 2, 9
	;; push identifier nBuilder
	PUSH S2
	TRUE
	CALLREF {
		CALL $appendToList_macro$
	}
	SWAP
	; expValue
	; end expValue
	; colValue
	POP S11
	; end colValue
	; expValue
	; end expValue
	; colValue
	POP S9
	; end colValue
	DROP
}
IFELSE
;; end if
;; push identifier builder
;; push identifier value
PUSH2 S7, S4
PUSHINT 64
TRUE
TRUE
FALSE
CALLREF {
	CALL $convertIntToHexStr_macro$
}
XCHG s2
; expValue
; end expValue
; colValue
POP S6
; end colValue
; expValue
; end expValue
; colValue
POP S4
; end colValue
; expValue
; end expValue
; colValue
POP S2
; end colValue
;; return
;; push identifier list
PUSH S8
;; push identifier first
;; push identifier second
;; push identifier flag
BLKPUSH 3, 4
CALLREF {
	CALL $appendToList_macro$
}
BLKDROP2 9, 2
; end function convertAddressToHexString_macro

.macro convertFixedPointToString_macro
;; param: list
;; param: builder
;; param: value
;; param: fractionalDigits
; function convertFixedPointToString_macro
;; push identifier value
PUSH S1
ABS
;; uint256
UFITS 256
;; decl: absVal
;; push identifier absVal
DUP
;; /
PUSHINT 10
;; **
;; push identifier fractionalDigits
PUSH S3
DUP2
OR
THROWIFNOT 69
CALLREF {
	CALL $__exp_macro$
}
DIV
;; decl: integer
;; push identifier absVal
PUSH S1
;; %
PUSHINT 10
;; **
;; push identifier fractionalDigits
PUSH S4
DUP2
OR
THROWIFNOT 69
CALLREF {
	CALL $__exp_macro$
}
MOD
;; decl: fractional
NEWC
;; decl: first
NEWC
;; decl: second
PUSHINT 0
;; decl: flag
;; push identifier builder
;; push identifier integer
PUSH2 S8, S4
PUSHINT 0
FALSE
;; push identifier value
PUSH S11
SGN
LESSINT 0
CALLREF {
	CALL $convertIntToDecStr_macro$
}
XCHG s2
; expValue
; end expValue
; colValue
POP S5
; end colValue
; expValue
; end expValue
; colValue
POP S3
; end colValue
; expValue
; end expValue
; colValue
NIP
; end colValue
;; push identifier list
PUSH S9
;; push identifier first
;; push identifier second
;; push identifier flag
BLKPUSH 3, 3
CALLREF {
	CALL $appendToList_macro$
}
SWAP
; expValue
; end expValue
; colValue
POP S11
; end colValue
; expValue
; end expValue
; colValue
POP S9
; end colValue
;; push identifier builder
PUSH S8
BREMBITS
;; decl: remBits
;; if
;; push identifier remBits
DUP
GTINT 8
PUSHCONT {
	; expValue
	PUSH S9
	; end expValue
	PUSHINT 46
	STUR 8
	; colValue
	POP S10
	; end colValue
}
PUSHCONT {
	NEWC
	;; decl: nBuilder
	; expValue
	DUP
	; end expValue
	PUSHINT 46
	STUR 8
	; colValue
	NIP
	; end colValue
	;; push identifier list
	;; push identifier builder
	BLKPUSH 2, 11
	;; push identifier nBuilder
	PUSH S2
	TRUE
	CALLREF {
		CALL $appendToList_macro$
	}
	SWAP
	; expValue
	; end expValue
	; colValue
	POP S13
	; end colValue
	; expValue
	; end expValue
	; colValue
	POP S11
	; end colValue
	DROP
}
IFELSE
;; end if
;; push identifier builder
;; push identifier fractional
;; push identifier fractionalDigits
PUSH3 S9, S4, S7
TRUE
FALSE
CALLREF {
	CALL $convertIntToDecStr_macro$
}
XCHG s2
; expValue
; end expValue
; colValue
POP S6
; end colValue
; expValue
; end expValue
; colValue
POP S4
; end colValue
; expValue
; end expValue
; colValue
POP S2
; end colValue
;; return
;; push identifier list
PUSH S10
;; push identifier first
;; push identifier second
;; push identifier flag
BLKPUSH 3, 4
CALLREF {
	CALL $appendToList_macro$
}
BLKDROP2 11, 2
; end function convertFixedPointToString_macro

.globl	convertIntToHexStr_short
.type	convertIntToHexStr_short, @function
;; param: builder
;; param: integer
; function convertIntToHexStr_short
;; return
;; push identifier builder
;; push identifier integer
DUP2
ABS
;; uint256
UFITS 256
PUSHINT 0
FALSE
TRUE
;; push identifier integer
PUSH S5
LESSINT 0
CALLREF {
	CALL $convertIntToHexStr_macro$
}
BLKDROP2 2, 3
; end function convertIntToHexStr_short

.macro convertIntToHexStr_macro
;; param: builder
;; param: integer
;; param: width
;; param: leadingZeros
;; param: isLow
;; param: addMinus
; function convertIntToHexStr_macro
;; push identifier builder
PUSH S5
BREMBITS
;; /
RSHIFT 3
;; decl: remBytes
NEWC
;; decl: oldBuilder
NEWC
;; decl: newBuilder
FALSE
;; decl: addedNewBuilder
;; if
;; push identifier remBytes
PUSH S3
PUSHCONT {
	; expValue
	; end expValue
	; colValue
	DROP
	TRUE
	; end colValue
	; expValue
	; end expValue
	;; push identifier builder
	PUSH S9
	; colValue
	POP S3
	; end colValue
	; expValue
	; end expValue
	;; push identifier newBuilder
	PUSH S1
	; colValue
	POP S10
	; end colValue
	; expValue
	; end expValue
	PUSHINT 127
	; colValue
	POP S4
	; end colValue
}
IFNOT
;; end if
;; push identifier leadingZeros
PUSH S6
PUSHCONT {
	PUSHINT 48
}
PUSHCONT {
	PUSHINT 32
}
IFELSE
;; decl: fill
;; if
;; push identifier addMinus
PUSH S5
PUSHCONT {
	; expValue
	PUSH S10
	; end expValue
	PUSHINT 45
	STUR 8
	; colValue
	POP S11
	; end colValue
}
IF
;; end if
;; --
; expValue
PUSH S4
; end expValue
DEC
; colValue
POP S5
; end colValue
;; if
;; push identifier remBytes
PUSH S4
PUSHCONT {
	; expValue
	; end expValue
	TRUE
	; colValue
	POP S2
	; end colValue
	; expValue
	; end expValue
	;; push identifier builder
	PUSH S10
	; colValue
	POP S4
	; end colValue
	; expValue
	; end expValue
	;; push identifier newBuilder
	PUSH S2
	; colValue
	POP S11
	; end colValue
	; expValue
	; end expValue
	PUSHINT 127
	; colValue
	POP S5
	; end colValue
}
IFNOT
;; end if
;; push identifier integer
PUSH S9
PUSHINT 16
;; param: integer
;; param: modulo
; function parseInteger
;; ret param: length
PUSHINT 0
;; ret param: digits
PUSHINT 0
NULL
TUPLE 2
PUSHCONT {
	; expValue
	; end expValue
	;; push identifier digits
	; colValue
	DUP
	SETINDEX 1
	; end colValue
	;; if
	;; push identifier integer
	PUSH S3
	PUSHCONT {
		PUSHINT 0
		NULL
		TUPLE 2
		;; decl: digit
		; expValue
		; end expValue
		; colValue
		PUSHINT 0
		SETINDEX 0
		; end colValue
		; expValue
		; end expValue
		;; push identifier digits
		; colValue
		PUSH S1
		SETINDEX 1
		; end colValue
		; expValue
		; end expValue
		;; push identifier digit
		DUP
		; colValue
		POP S2
		; end colValue
		;; return
		PUSHINT 1
		;; push identifier digits
		PUSH S2
		BLKDROP2 5, 2
	}
	IFNOTJMP
	;; end if
	; while
	PUSHCONT {
		;; push identifier integer
		PUSH S3
		NEQINT 0
	}
	PUSHCONT {
		;; ++
		; expValue
		PUSH S1
		; end expValue
		INC
		; colValue
		POP S2
		; end colValue
		PUSHINT 0
		NULL
		TUPLE 2
		;; decl: digit
		;; push identifier integer
		;; push identifier modulo
		BLKPUSH 2, 4
		DIVMOD
		SWAP
		; expValue
		; end expValue
		; colValue
		POP S6
		; end colValue
		; expValue
		PUSH S2
		; end expValue
		SWAP
		; colValue
		SETINDEX 0
		POP S2
		; end colValue
		; expValue
		; end expValue
		;; push identifier digits
		; colValue
		; end colValue
		; expValue
		; end expValue
		;; push identifier digit
		; colValue
		; end colValue
		SWAP
		SETINDEX 1
	}
	WHILE
	; end while
	;; get member tail
	;; push identifier digits
	DUP
	INDEX 1
	DUP
	ISNULL
	THROWIF 63
	; expValue
	; end expValue
	; colValue
	NIP
	; end colValue
	;; returning named params
	SWAP2
	DROP2
}
CALLX
; end function parseInteger
;; decl: length
;; decl: digits
;; if
;; push identifier width
PUSH S10
PUSHCONT {
	;; if
	;; push identifier width
	;; <
	;; push identifier length
	PUSH2 S10, S1
	LESS
	;; short-circuiting ||
	DUP
	PUSHCONT {
		DROP
		;; push identifier width
		PUSH S10
		GTINT 127
	}
	IFNOT
	THROWIF 69
	;; end if
	;; push identifier width
	;; -
	;; push identifier length
	PUSH2 S10, S1
	SUB
	;; decl: zeroes
	;; if
	;; push identifier zeroes
	;; <=
	;; push identifier remBytes
	PUSH2 S0, S7
	LEQ
	PUSHCONT {
		; while
		;; push identifier zeroes
		DUP
		PUSHCONT {
			; expValue
			; end expValue
			;; push identifier fill
			PUSH2 S13, S3
			STUR 8
			; colValue
			POP S14
			; end colValue
		}
		REPEAT
		; end while
		;; push identifier zeroes
		; expValue
		; end expValue
		PUSH2 S7, S0
		SUB
		; colValue
		POP S8
		; end colValue
		;; if
		;; push identifier remBytes
		PUSH S7
		PUSHCONT {
			; expValue
			; end expValue
			TRUE
			; colValue
			POP S5
			; end colValue
			; expValue
			; end expValue
			;; push identifier builder
			PUSH S13
			; colValue
			POP S7
			; end colValue
			; expValue
			; end expValue
			;; push identifier newBuilder
			PUSH S5
			; colValue
			POP S14
			; end colValue
			; expValue
			; end expValue
			PUSHINT 127
			; colValue
			POP S8
			; end colValue
		}
		IFNOT
		;; end if
	}
	PUSHCONT {
		; while
		;; push identifier remBytes
		PUSH S7
		PUSHCONT {
			; expValue
			; end expValue
			;; push identifier fill
			PUSH2 S13, S3
			STUR 8
			; colValue
			POP S14
			; end colValue
		}
		REPEAT
		; end while
		; expValue
		; end expValue
		TRUE
		; colValue
		POP S5
		; end colValue
		; expValue
		; end expValue
		;; push identifier builder
		PUSH S13
		; colValue
		POP S7
		; end colValue
		; expValue
		; end expValue
		;; push identifier newBuilder
		PUSH S5
		; colValue
		POP S14
		; end colValue
		; while
		;; push identifier zeroes
		;; -
		;; push identifier remBytes
		PUSH2 S0, S7
		SUB
		PUSHCONT {
			; expValue
			; end expValue
			;; push identifier fill
			PUSH2 S13, S3
			STUR 8
			; colValue
			POP S14
			; end colValue
		}
		REPEAT
		; end while
		; expValue
		; end expValue
		PUSHINT 127
		;; -
		;; push identifier zeroes
		PUSH S1
		SUB
		;; +
		;; push identifier remBytes
		PUSH S8
		ADD
		; colValue
		POP S8
		; end colValue
	}
	IFELSE
	;; end if
	DROP
}
IF
;; end if
;; if
;; push identifier length
;; <=
;; push identifier remBytes
PUSH2 S1, S6
LEQ
PUSHCONT {
	; while
	;; push identifier length
	PUSH S1
	PUSHCONT {
		;; get member num
		;; push identifier digits
		DUP
		INDEX 0
		;; decl: dig
		;; if
		;; push identifier dig
		DUP
		LESSINT 10
		PUSHCONT {
			; expValue
			PUSH S13
			; end expValue
			PUSHINT 48
			;; +
			;; push identifier dig
			PUSH S2
			ADD
			STUR 8
			; colValue
			POP S14
			; end colValue
		}
		PUSHCONT {
			; expValue
			; end expValue
			;; push identifier isLow
			PUSH2 S13, S9
			PUSHCONT {
				PUSHINT 87
			}
			PUSHCONT {
				PUSHINT 55
			}
			IFELSE
			;; +
			;; push identifier dig
			PUSH S2
			ADD
			STUR 8
			; colValue
			POP S14
			; end colValue
		}
		IFELSE
		;; end if
		;; get member tail
		;; push identifier digits
		PUSH S1
		INDEX 1
		DUP
		ISNULL
		THROWIF 63
		; expValue
		; end expValue
		; colValue
		POP S2
		; end colValue
		DROP
	}
	REPEAT
	; end while
}
PUSHCONT {
	; while
	;; push identifier remBytes
	PUSH S6
	PUSHCONT {
		;; get member num
		;; push identifier digits
		DUP
		INDEX 0
		;; decl: dig
		;; if
		;; push identifier dig
		DUP
		LESSINT 10
		PUSHCONT {
			; expValue
			PUSH S13
			; end expValue
			PUSHINT 48
			;; +
			;; push identifier dig
			PUSH S2
			ADD
			STUR 8
			; colValue
			POP S14
			; end colValue
		}
		PUSHCONT {
			; expValue
			; end expValue
			;; push identifier isLow
			PUSH2 S13, S9
			PUSHCONT {
				PUSHINT 87
			}
			PUSHCONT {
				PUSHINT 55
			}
			IFELSE
			;; +
			;; push identifier dig
			PUSH S2
			ADD
			STUR 8
			; colValue
			POP S14
			; end colValue
		}
		IFELSE
		;; end if
		;; get member tail
		;; push identifier digits
		PUSH S1
		INDEX 1
		DUP
		ISNULL
		THROWIF 63
		; expValue
		; end expValue
		; colValue
		POP S2
		; end colValue
		DROP
	}
	REPEAT
	; end while
	; expValue
	; end expValue
	TRUE
	; colValue
	POP S4
	; end colValue
	; expValue
	; end expValue
	;; push identifier builder
	PUSH S12
	; colValue
	POP S6
	; end colValue
	; expValue
	; end expValue
	;; push identifier newBuilder
	PUSH S4
	; colValue
	POP S13
	; end colValue
	; while
	;; push identifier length
	;; -
	;; push identifier remBytes
	PUSH2 S1, S6
	SUB
	PUSHCONT {
		;; get member num
		;; push identifier digits
		DUP
		INDEX 0
		;; decl: dig
		;; if
		;; push identifier dig
		DUP
		LESSINT 10
		PUSHCONT {
			; expValue
			PUSH S13
			; end expValue
			PUSHINT 48
			;; +
			;; push identifier dig
			PUSH S2
			ADD
			STUR 8
			; colValue
			POP S14
			; end colValue
		}
		PUSHCONT {
			; expValue
			; end expValue
			;; push identifier isLow
			PUSH2 S13, S9
			PUSHCONT {
				PUSHINT 87
			}
			PUSHCONT {
				PUSHINT 55
			}
			IFELSE
			;; +
			;; push identifier dig
			PUSH S2
			ADD
			STUR 8
			; colValue
			POP S14
			; end colValue
		}
		IFELSE
		;; end if
		;; get member tail
		;; push identifier digits
		PUSH S1
		INDEX 1
		DUP
		ISNULL
		THROWIF 63
		; expValue
		; end expValue
		; colValue
		POP S2
		; end colValue
		DROP
	}
	REPEAT
	; end while
}
IFELSE
;; end if
;; if
;; !
;; push identifier addedNewBuilder
PUSH S3
NOT
PUSHCONT {
	; expValue
	; end expValue
	;; push identifier builder
	PUSH S12
	; colValue
	POP S6
	; end colValue
}
PUSHCONT {
	; expValue
	; end expValue
	;; push identifier builder
	PUSH S12
	; colValue
	POP S5
	; end colValue
}
IFELSE
;; end if
;; return
;; push identifier oldBuilder
;; push identifier newBuilder
;; push identifier addedNewBuilder
BLKPUSH 3, 5
BLKDROP2 13, 3
; end function convertIntToHexStr_macro

.macro storeStringInBuilders_macro
;; param: first
;; param: second
; function storeStringInBuilders_macro
;; push identifier first
PUSH S1
BREMBITS
;; -
ADDCONST -7
;; decl: remBits
;; push identifier second
PUSH S1
SBITREFS
;; decl: bitLen
;; decl: refs
;; if
;; push identifier refs
DUP
PUSHCONT {
	; expValue
	PUSH S3
	; end expValue
	PUSHINT 0
	;; push identifier refs
	PUSH S2
	SSKIPFIRST
	; colValue
	POP S4
	; end colValue
}
IF
;; end if
NEWC
;; decl: newBuilder
;; push identifier bitLen
;; <=
;; push identifier remBits
PUSH2 S2, S3
LEQ
;; decl: fits
;; if
;; push identifier fits
DUP
PUSHCONT {
	; expValue
	; end expValue
	;; push identifier second
	BLKPUSH 2, 6
	STSLICER
	; colValue
	POP S7
	; end colValue
}
PUSHCONT {
	; expValue
	; end expValue
	;; push identifier remBits
	BLKPUSH 2, 5
	LDSLICEX
	; colValue
	POP S7
	; end colValue
	;; decl: start
	; expValue
	; end expValue
	;; push identifier start
	PUSH2 S7, S0
	STSLICER
	; colValue
	POP S8
	; end colValue
	; expValue
	; end expValue
	;; push identifier second
	PUSH2 S2, S6
	STSLICER
	; colValue
	POP S3
	; end colValue
	DROP
}
IFELSE
;; end if
;; return
;; push identifier first
PUSH S6
;; push identifier newBuilder
;; !
;; push identifier fits
BLKPUSH 2, 2
NOT
BLKDROP2 7, 3
; end function storeStringInBuilders_macro

.macro appendToList_macro
;; param: list
;; param: first
;; param: second
;; param: secondIsValid
; function appendToList_macro
PUSHCONT {
	;; if
	;; !
	;; push identifier secondIsValid
	DUP
	PUSHCONT {
		;; return
		;; push identifier list
		;; push identifier first
		OVER2
		BLKDROP2 4, 2
	}
	IFNOTJMP
	;; end if
	NEWC
	NULL
	TUPLE 2
	;; decl: nList
	; expValue
	; end expValue
	;; push identifier list
	; colValue
	PUSH S4
	SETINDEX 1
	; end colValue
	; expValue
	; end expValue
	;; push identifier first
	; colValue
	PUSH S3
	SETINDEX 0
	; end colValue
	;; return
	;; push identifier nList
	;; push identifier second
	PUSH2 S0, S2
	BLKDROP2 5, 2
}
CALLX
; end function appendToList_macro

.macro assembleList_macro
;; param: list
;; param: builder
; function assembleList_macro
;; push identifier builder
DUP
;; decl: curBuilder
; while
PUSHCONT {
	;; get member tail
	;; push identifier list
	PUSH S2
	INDEX 1
	ISNULL
	NOT
}
PUSHCONT {
	; expValue
	PUSH2 S2, S2
	INDEX 0
	; end expValue
	;; push identifier curBuilder
	PUSH S2
	STBREFR
	; colValue
	SETINDEX 0
	POP S3
	; end colValue
	; expValue
	; end expValue
	;; get member builder
	;; push identifier list
	; colValue
	DROP
	PUSH S1
	INDEX 0
	; end colValue
	;; get member tail
	;; push identifier list
	PUSH S2
	INDEX 1
	DUP
	ISNULL
	THROWIF 63
	; expValue
	; end expValue
	; colValue
	POP S3
	; end colValue
}
WHILE
; end while
;; return
;; push identifier curBuilder
DUP
ENDC
XCHG s3
BLKDROP 3
; end function assembleList_macro

.macro __stoi_macro
;; param: str
; function __stoi_macro
PUSHCONT {
	;; push identifier str
	DUP
	CTOS
	;; decl: strSlice
	;; if
	;; push identifier strSlice
	DUP
	SBITS
	LESSINT 8
	PUSHCONT {
		;; return
		DROP2
		PUSHINT 0
		FALSE
	}
	IFJMP
	;; end if
	;; push identifier strSlice
	;; decl: copy
	; expValue
	BLKPUSH 2, 0
	; end expValue
	LDU 8
	; colValue
	POP S2
	; end colValue
	;; decl: first
	;; push identifier first
	DUP
	EQINT 45
	;; decl: isNeg
	PUSHINT 0
	;; decl: second
	;; push identifier copy
	PUSH S3
	SBITS
	;; decl: bits
	;; if
	;; push identifier isNeg
	;; short-circuiting &&
	PUSH2 S2, S2
	PUSHCONT {
		DROP
		;; push identifier bits
		DUP
		;; >=
		PUSHINT 16
		GEQ
	}
	IF
	PUSHCONT {
		; expValue
		PUSH S4
		; end expValue
		LDU 8
		LDU 8
		; colValue
		POP S7
		; end colValue
		SWAP
		; expValue
		; end expValue
		; colValue
		POP S5
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP S2
		; end colValue
	}
	IF
	;; end if
	;; if
	;; !
	;; push identifier isNeg
	PUSH S2
	NOT
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier bits
		DUP
		;; >=
		PUSHINT 8
		GEQ
	}
	IF
	PUSHCONT {
		; expValue
		PUSH S4
		; end expValue
		LDU 8
		; colValue
		POP S6
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP S2
		; end colValue
	}
	IF
	;; end if
	;; push identifier first
	PUSH S3
	EQINT 48
	;; short-circuiting &&
	DUP
	PUSHCONT {
		DROP
		;; push identifier second
		PUSH S1
		EQINT 120
	}
	IF
	;; decl: isHex
	;; if
	;; push identifier isNeg
	PUSH S3
	PUSHCONT {
		; expValue
		PUSH S6
		; end expValue
		LDU 8
		; colValue
		POP S8
		; end colValue
		DROP
	}
	IF
	;; end if
	;; if
	;; push identifier isHex
	DUP
	PUSHCONT {
		; expValue
		PUSH S6
		; end expValue
		LDU 8
		LDU 8
		; colValue
		POP S9
		; end colValue
		DROP2
	}
	IF
	;; end if
	PUSHINT 0
	;; decl: res
	TRUE
	;; decl: status
	;; push identifier strSlice
	PUSH S8
	SBITS
	;; >>
	RSHIFT 3
	;; decl: digits
	;; if
	;; push identifier isHex
	PUSH S3
	PUSHCONT {
		; while
		;; push identifier digits
		DUP
		PUSHCONT {
			; expValue
			PUSH S9
			; end expValue
			LDU 8
			; colValue
			POP S11
			; end colValue
			;; decl: dig
			; expValue
			; end expValue
			PUSH S3
			MULCONST 16
			; colValue
			POP S4
			; end colValue
			;; if
			;; push identifier dig
			DUP
			;; >=
			PUSHINT 48
			GEQ
			;; short-circuiting &&
			DUP
			PUSHCONT {
				DROP
				;; push identifier dig
				DUP
				;; <=
				PUSHINT 57
				LEQ
			}
			IF
			PUSHCONT {
				;; push identifier dig
				DUP
				;; -
				ADDCONST -48
				; expValue
				PUSH S4
				; end expValue
				ADD
				; colValue
				POP S4
				; end colValue
			}
			PUSHCONT {
				;; if
				;; push identifier dig
				DUP
				;; >=
				PUSHINT 65
				GEQ
				;; short-circuiting &&
				DUP
				PUSHCONT {
					DROP
					;; push identifier dig
					DUP
					;; <=
					PUSHINT 70
					LEQ
				}
				IF
				PUSHCONT {
					;; push identifier dig
					DUP
					;; -
					;; +
					ADDCONST -55
					; expValue
					PUSH S4
					; end expValue
					ADD
					; colValue
					POP S4
					; end colValue
				}
				PUSHCONT {
					;; if
					;; push identifier dig
					DUP
					;; >=
					PUSHINT 97
					GEQ
					;; short-circuiting &&
					DUP
					PUSHCONT {
						DROP
						;; push identifier dig
						DUP
						;; <=
						PUSHINT 102
						LEQ
					}
					IF
					PUSHCONT {
						;; push identifier dig
						DUP
						;; -
						;; +
						ADDCONST -87
						; expValue
						PUSH S4
						; end expValue
						ADD
						; colValue
						POP S4
						; end colValue
					}
					PUSHCONT {
						; expValue
						; end expValue
						FALSE
						; colValue
						POP S3
						; end colValue
					}
					IFELSE
					;; end if
				}
				IFELSE
				;; end if
			}
			IFELSE
			;; end if
			DROP
		}
		REPEAT
		; end while
	}
	PUSHCONT {
		; while
		;; push identifier digits
		DUP
		PUSHCONT {
			; expValue
			PUSH S9
			; end expValue
			LDU 8
			; colValue
			POP S11
			; end colValue
			;; decl: dig
			;; if
			;; push identifier dig
			DUP
			LESSINT 48
			;; short-circuiting ||
			DUP
			PUSHCONT {
				DROP
				;; push identifier dig
				DUP
				GTINT 57
			}
			IFNOT
			PUSHCONT {
				; expValue
				; end expValue
				FALSE
				; colValue
				POP S3
				; end colValue
			}
			IF
			;; end if
			; expValue
			; end expValue
			PUSH S3
			MULCONST 10
			; colValue
			POP S4
			; end colValue
			;; push identifier dig
			;; -
			; expValue
			; end expValue
			; colValue
			; end colValue
			ADDCONST -48
			PUSH S3
			ADD
			POP S3
		}
		REPEAT
		; end while
	}
	IFELSE
	;; end if
	;; if
	;; push identifier isNeg
	PUSH S6
	PUSHCONT {
		; expValue
		; end expValue
		;; -
		;; push identifier res
		PUSH S2
		NEGATE
		; colValue
		POP S3
		; end colValue
	}
	IF
	;; end if
	;; return
	;; push identifier res
	;; push identifier status
	BLKPUSH 2, 2
	BLKDROP2 11, 2
}
CALLX
; end function __stoi_macro

.globl	strToList
.type	strToList, @function
;; param: str
; function strToList
NEWC
NULL
TUPLE 2
;; decl: list
;; push identifier str
PUSH S1
CTOS
;; decl: slice
; while
PUSHCONT {
	;; push identifier slice
	DUP
	SREFS
	NEQINT 0
}
PUSHCONT {
	; expValue
	DUP
	; end expValue
	LDREFRTOS
	SWAP
	; colValue
	POP S2
	; end colValue
	;; decl: n_slice
	NEWC
	NULL
	TUPLE 2
	;; decl: nList
	; expValue
	BLKPUSH 2, 0
	INDEX 0
	; end expValue
	;; push identifier slice
	PUSH S4
	STSLICER
	; colValue
	SETINDEX 0
	NIP
	; end colValue
	; expValue
	; end expValue
	;; push identifier list
	; colValue
	PUSH S3
	SETINDEX 1
	; end colValue
	; expValue
	; end expValue
	;; push identifier nList
	; colValue
	; end colValue
	; expValue
	; end expValue
	;; push identifier n_slice
	; colValue
	; end colValue
	POP S3
	NIP
}
WHILE
; end while
NEWC
;; decl: builder
; expValue
; end expValue
;; push identifier slice
PUSH2 S0, S1
STSLICER
; colValue
NIP
; end colValue
;; return
;; push identifier list
;; push identifier builder
PUSH2 S2, S0
BLKDROP2 4, 2
; end function strToList

.macro __substr_macro
;; param: str
;; param: from
;; param: count
; function __substr_macro
;; ret param: substr
NEWC
ENDC
;; push identifier str
PUSH S3
PUSHINT 4294967295
CDATASIZE
;; decl: strSize
; expValue
; end expValue
PUSH S1
RSHIFT 3
; colValue
POP S2
; end colValue
;; push identifier strSize
PUSH S1
;; int256
FITS 256
;; >=
;; push identifier from
PUSH S6
;; int256
FITS 256
;; +
;; push identifier count
PUSH S6
ADD
GEQ
THROWIFNOT 71
;; if
;; push identifier count
PUSH S4
EQINT -1
PUSHCONT {
	;; push identifier strSize
	;; -
	;; push identifier from
	PUSH2 S1, S5
	SUB
	;; int256
	FITS 256
	; expValue
	; end expValue
	; colValue
	POP S5
	; end colValue
}
IF
;; end if
;; push identifier from
PUSH S5
;; /
PUSHINT 127
DIV
;; decl: skipCnt
;; push identifier from
PUSH S6
;; %
PUSHINT 127
MOD
;; decl: skipBytes
;; push identifier str
PUSH S8
CTOS
;; decl: slice
; while
;; push identifier skipCnt
PUSH S2
PUSHCONT {
	; expValue
	DUP
	; end expValue
	LDREFRTOS
	SWAP
	; colValue
	POP S2
	; end colValue
	; expValue
	; end expValue
	; colValue
	NIP
	; end colValue
}
REPEAT
; end while
; expValue
; end expValue
;; push identifier skipBytes
PUSH2 S0, S1
;; *
MULCONST 8
SDSKIPFIRST
; colValue
NIP
; end colValue
NEWC
NULL
TUPLE 2
;; decl: list
NEWC
;; decl: builder
; while
PUSHCONT {
	;; push identifier count
	PUSH S9
	NEQINT 0
}
PUSHCONT {
	;; push identifier count
	;; push identifier slice
	PUSH2 S9, S2
	SBITS
	;; >>
	RSHIFT 3
	;; push identifier builder
	PUSH S2
	BREMBITS
	;; >>
	RSHIFT 3
	MIN
	MIN
	;; decl: byteNum
	; expValue
	; end expValue
	; expValue
	; end expValue
	;; push identifier byteNum
	PUSH3 S1, S3, S0
	;; <<
	LSHIFT 3
	;; uint16
	UFITS 16
	LDSLICEX
	; colValue
	POP S6
	; end colValue
	STSLICER
	; colValue
	POP S2
	; end colValue
	;; push identifier byteNum
	; expValue
	; end expValue
	PUSH2 S10, S0
	SUB
	; colValue
	POP S11
	; end colValue
	;; if
	;; push identifier count
	PUSH S10
	PUSHCONT {
		;; if
		;; push identifier slice
		PUSH S3
		SBITS
		PUSHCONT {
			; expValue
			PUSH S3
			; end expValue
			LDREFRTOS
			SWAP
			; colValue
			POP S5
			; end colValue
			; expValue
			; end expValue
			; colValue
			POP S4
			; end colValue
		}
		IFNOT
		;; end if
		;; if
		;; push identifier builder
		PUSH S1
		BREMBITS
		LESSINT 8
		PUSHCONT {
			NEWC
			NULL
			TUPLE 2
			;; decl: nList
			; expValue
			; end expValue
			;; push identifier builder
			; colValue
			PUSH S2
			SETINDEX 0
			; end colValue
			; expValue
			; end expValue
			;; push identifier list
			; colValue
			PUSH S3
			SETINDEX 1
			; end colValue
			; expValue
			; end expValue
			;; push identifier nList
			; colValue
			; end colValue
			;; decl: nbuilder
			; expValue
			; end expValue
			;; push identifier nbuilder
			; colValue
			; end colValue
			POP S3
			NEWC
			POP S2
		}
		IF
		;; end if
	}
	IF
	;; end if
	DROP
}
WHILE
; end while
;; return
;; push identifier list
;; push identifier builder
DUP2
CALLREF {
	CALL $assembleList_macro$
}
XCHG s12
BLKDROP 12
; end function __substr_macro

.macro compareLongStrings_macro
;; param: lstr
;; param: rstr
; function compareLongStrings_macro
PUSHCONT {
	;; push identifier lstr
	PUSH S1
	CTOS
	;; decl: left
	;; push identifier rstr
	PUSH S1
	CTOS
	;; decl: right
	; while
	FALSE ; decl return flag
	PUSHCONT {
		DUP
		LESSINT 2
		DUP
		PUSHCONT {
			DROP
			TRUE
		}
		IF
	}
	PUSHCONT {
		;; push identifier left
		;; push identifier right
		BLKPUSH 2, 2
		SDLEXCMP
		;; decl: res
		;; if
		;; push identifier res
		DUP
		PUSHCONT {
			;; return
			XCHG s5
			BLKDROP 5
			PUSHINT 4
		}
		IFJMP
		;; end if
		;; push identifier left
		PUSH S3
		SREFS
		;; decl: lRefs
		;; push identifier right
		PUSH S3
		SREFS
		;; decl: rRefs
		;; if
		;; push identifier lRefs
		;; >
		;; push identifier rRefs
		DUP2
		GREATER
		PUSHCONT {
			;; return
			BLKDROP 8
			PUSHINT 1
			PUSHINT 4
		}
		IFJMP
		;; end if
		;; if
		;; push identifier rRefs
		;; >
		;; push identifier lRefs
		PUSH2 S0, S1
		GREATER
		PUSHCONT {
			;; return
			BLKDROP 8
			PUSHINT -1
			PUSHINT 4
		}
		IFJMP
		;; end if
		;; if
		;; push identifier lRefs
		;; +
		;; push identifier rRefs
		DUP2
		ADD
		PUSHCONT {
			;; return
			BLKDROP 8
			PUSHINT 0
			PUSHINT 4
		}
		IFNOTJMP
		;; end if
		; expValue
		PUSH S5
		; end expValue
		LDREFRTOS
		SWAP
		; colValue
		POP S7
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP S6
		; end colValue
		; expValue
		PUSH S4
		; end expValue
		LDREFRTOS
		SWAP
		; colValue
		POP S6
		; end colValue
		; expValue
		; end expValue
		; colValue
		POP S5
		; end colValue
		BLKDROP 3
	}
	WHILE
	EQINT 4
	IFRET
	; end while
	;; return
	BLKDROP 4
	PUSHINT 0
}
CALLX
; end function compareLongStrings_macro

.macro concatenateStrings_macro
;; param: str
;; param: tail
; function concatenateStrings_macro
;; push identifier str
PUSH S1
CALL $strToList$
;; decl: list
;; decl: builder
;; push identifier tail
PUSH S2
CTOS
;; decl: slice
NEWC
;; decl: builder2
PUSHINT 0
;; decl: isValid
;; push identifier builder
;; push identifier slice
OVER2
CALLREF {
	CALL $storeStringInBuilders_macro$
}
XCHG s2
; expValue
; end expValue
; colValue
POP S6
; end colValue
; expValue
; end expValue
; colValue
POP S3
; end colValue
; expValue
; end expValue
; colValue
NIP
; end colValue
;; push identifier list
;; push identifier builder
BLKPUSH 2, 4
;; push identifier builder2
;; push identifier isValid
OVER2
CALLREF {
	CALL $appendToList_macro$
}
SWAP
; expValue
; end expValue
; colValue
POP S6
; end colValue
; expValue
; end expValue
; colValue
POP S4
; end colValue
; while
PUSHCONT {
	;; push identifier slice
	PUSH S2
	PUSHINT 1
	SCHKREFSQ
}
PUSHCONT {
	; expValue
	PUSH S2
	; end expValue
	LDREFRTOS
	SWAP
	; colValue
	POP S4
	; end colValue
	; expValue
	; end expValue
	; colValue
	POP S3
	; end colValue
	;; push identifier builder
	;; push identifier slice
	OVER2
	CALLREF {
		CALL $storeStringInBuilders_macro$
	}
	XCHG s2
	; expValue
	; end expValue
	; colValue
	POP S6
	; end colValue
	; expValue
	; end expValue
	; colValue
	POP S3
	; end colValue
	; expValue
	; end expValue
	; colValue
	NIP
	; end colValue
	;; push identifier list
	;; push identifier builder
	BLKPUSH 2, 4
	;; push identifier builder2
	;; push identifier isValid
	OVER2
	CALLREF {
		CALL $appendToList_macro$
	}
	SWAP
	; expValue
	; end expValue
	; colValue
	POP S6
	; end colValue
	; expValue
	; end expValue
	; colValue
	POP S4
	; end colValue
}
WHILE
; end while
;; return
;; push identifier list
;; push identifier builder
BLKPUSH 2, 4
CALLREF {
	CALL $assembleList_macro$
}
XCHG s7
BLKDROP 7
; end function concatenateStrings_macro

